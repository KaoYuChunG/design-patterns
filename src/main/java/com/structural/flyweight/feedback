基本介绍
1) 享元模式（Flyweight Pattern） 也叫 蝇量模式: 运 用共享技术有效地支持大量细粒度的对象
2) 常用于系统底层开发，解决系统的性能问题。像 数据库连接池，里面都是创建好的连接对象，在 这些连接对象中有我们需要的则直接拿来用，避 免重新创建，如果没有我们需要的，则创建一个
3) 享元模式能够解决重复对象的内存浪费的问题， 当系统中有大量相似对象，需要缓冲池时。不需 总是创建新对象，可以从缓冲池里拿。这样可以 降低系统内存，同时提高效率
4) 享元模式经典的应用场景就是池技术了，String常 量池、数据库连接池、缓冲池等等都是享元模式 的应用，享元模式是池技术的重要实现方式

注意事项
1) 在享元模式这样理解，“享”就表示共享，“元”表示对象
2) 系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时， 我们就可以考虑选用享元模式
3) 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用 HashMap/HashTable存储
4) 享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率
5) 享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有 固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的 地方.
6) 使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制。
7) 享元模式经典的应用场景是需要缓冲池的场景，比如 String常量池、数据库连接池

1. 用於結構相似度高，一個重複對象很多，造成服務器資源浪費
2. 共享其相關代碼和數據，對於內存等服務器資源達到共享，以減少浪費。
3. 維護和擴展更加容易。
4. 如string常量池，數據庫連接池，緩衝池都是例子。
5. 其中有外部和內部狀態之分。外部是不共享的部分，一般不會出現在享元工廠。只有內部是共享的(位於工廠內)，因為有一致性。
   如細粒度和共享。外部會隨環境改變而改變，內部部會隨環境改變而改變。
6. JDK-> Integer 是一個案例。

當大量的對象消耗大量的內存且大部分可以外部化時可以使用此模式。可大量減少內存占用，提高效率。是緩存池的概念。
*要注意此模式提高了複雜度，因為需要設計師去區分哪些是內部哪些是外部狀態，會增加耦合度。要三思來使用他。相似度使用他才划算。
且須分離內部和外部狀態，外部具有固定性，不可隨內部變化而有所改變。